<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<!ENTITY SCRIPTNAME "rpmconf" >
<!ENTITY SCRIPTCOMMAND "rpmconf" >

]>
<refentry>

<RefMeta>
<RefEntryTitle>&SCRIPTCOMMAND;</RefEntryTitle><manvolnum>8</manvolnum>
<RefMiscInfo>Version 0.2</RefMiscInfo>
</RefMeta>

<RefNameDiv>
<RefName><command>&SCRIPTCOMMAND;</command></RefName>
<RefPurpose>
    This tool searches for .rpmnew, .rpmsave and .rpmorig files and asks you what to do with them: keep the current version, replace with the previous version, or review the diff.
</RefPurpose>
</RefNameDiv>
<RefSynopsisDiv>
<Synopsis>
    <cmdsynopsis>
        <command>&SCRIPTCOMMAND;</command> 
        <arg>options <replaceable>...</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-a, --all</arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-o<replaceable>&lt;package&gt;</replaceable>, --owner=<replaceable>&lt;package&gt;</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-f<replaceable>&lt;type&gt;</replaceable> --frontend=<replaceable>&lt;type&gt;</replaceable> --merge-frontend=<replaceable>&lt;type&gt;</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>--root <replaceable>&lt;ROOT&gt;</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-c, --clean</arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-d, --debug</arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-D, --diff</arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-t, --test</arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-u, --unattended <replaceable><optional>&lt;MODE&gt;</optional></replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-x, --exclude <replaceable>&lt;DIRECTORY&gt;</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
        <arg>-Z</arg>
    </cmdsynopsis>

</Synopsis>
</RefSynopsisDiv>

<RefSect1><Title>Description</Title>
<para>
    Rpmconf will search for all config file of given package (or all
    installed packages) and will check if coresponding .rpmsave, .rpmnew or
    .rpmorig files exist. If so, you will be asked if you want to keep the
    current version, revert to the previous version, or diff the two files.
    The unwanted file is then deleted.
</para>
<para>
    Additionally, rpmconf can also handle application configuration, if
    the application supports rpmconf. The application must have an
    executable file present in /usr/share/rpmconf/. The file must have the
    same name as package itself and the package must own that file. The
    executable must be idempotent, i.e. subsequent executions should have
    no effect. Ideally it should be a Puppet/Chef/Ansible/CFengine manifest.
</para>
</RefSect1>

<RefSect1><Title>Options</Title>
<variablelist>
    <varlistentry>
        <term>-a, --all</term>
        <listitem>
            <para>Check configuration files of all packages.</para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-o&lt;package&gt;, --owner=&lt;package&gt;</term>
        <listitem>
            <para>Check only configuration files of given package.</para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-f&lt;type&gt;, --frontend=&lt;type&gt;, --merge-frontend=&lt;type&gt;</term>
        <listitem>
            <para>Define which frontend should be used for merging. Valid options are: vimdiff, gvimdiff, diffuse, kdiff3, kompare, meld, sdiff and env. When set to env, the command to use is taken from the environment variable $MERGE. The default is env.</para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>--diff-frontend=&lt;type&gt;</term>
        <listitem>
            <para>Define which external frontend should be used for displaying diffs. Valid options are: vimdiff, gvimdiff, diffuse, kdiff3, kompare, meld, sdiff and env. When set to env, the command to use is taken from the environment variable $DIFF. The default is to use the internal Python diff.</para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-c, --clean</term>
        <listitem>
            <para>Find all .rpmnew and .rpmsave files in /etc and /var directories. List all files belonging to installed packages, then write all files which are orphaned and ask if it is safe to delete them.</para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-d, --debug</term>
        <listitem>
            <para>Dry run. Instead of executing an action (move or delete a file) the filename will
                  be echoed to standard output. However, the executable for merging of configuration files
		  will still be executed. Beware that this option is position-sensitive: only actions specified after --debug are dry-run, e.g. --all --debug --clean will run --clean in dry run mode but not --all.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-D, --diff</term>
        <listitem>
            <para>
                  Non-interactive diff mode.
                  This option works with <literal>--owner</literal> and <literal>--all</literal>.
                  Useful to audit config files after package upgrades.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>--root ROOT</term>
        <listitem>
            <para>
                  Specifies an alternative installroot, relative to where all packages are installed.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-t, --test</term>
        <listitem>
            <para>
                  Just test existence of files to merge. If there is some file to merge then rpmconf
                  will print it and exit with status code 5. If there are none to merge, then exit
                  with status code 0.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-u [&lt;MODE&gt;], --unattended [&lt;MODE&gt;]</term>
        <listitem>
            <para>
                  Unattended mode.
                  Do not prompt user, but perform actions based on MODE. Valid options are: use_maintainer, use_your, default.
                  use_maintainer replaces existing configuration files with .rpmnew files and deletes leftover .rpmsave and
                  .rpmorig files. use_your deletes .rpmnew files and replaces existing configuration files with .rpmsave files.
                  default does use_your for .rpmnew files and use_maintainer for .rpmsave files, as are the default prompts
                  in interactive mode.
                  Specifying MODE is optional, default is used by default.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-V, --version</term>
        <listitem>
            <para>
                  Display &SCRIPTCOMMAND; version. This option expects that this script
		  is installed as rpm package.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-x, --exclude [DIRECTORY [DIRECTORY ...]]</term>
        <listitem>
            <para>
                  Exclude DIRECTORY from checking. Applies only for -c.
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>-Z</term>
        <listitem>
            <para>
                  Display the SELinux contexts of the old and new files. Note: if you choose to install .rpmsave version. It is copied to the original filename, therefore its SELinux context is reset to the default value specified by SELinux policy.
            </para>
        </listitem>
    </varlistentry>
</variablelist>
</RefSect1>

<RefSect1><Title>See Also</Title>
<simplelist>
    <member>rpm(8)</member>
</simplelist>
</RefSect1>

<RefSect1><Title>Authors</Title>
<simplelist>
    <member>Miroslav Such√Ω <email>msuchy@redhat.com</email></member>
</simplelist>
</RefSect1>
</RefEntry>
